// Generated by gencpp from file mobrob_util/ME439WheelDisplacements.msg
// DO NOT EDIT!


#ifndef MOBROB_UTIL_MESSAGE_ME439WHEELDISPLACEMENTS_H
#define MOBROB_UTIL_MESSAGE_ME439WHEELDISPLACEMENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobrob_util
{
template <class ContainerAllocator>
struct ME439WheelDisplacements_
{
  typedef ME439WheelDisplacements_<ContainerAllocator> Type;

  ME439WheelDisplacements_()
    : d_left(0.0)
    , d_right(0.0)  {
    }
  ME439WheelDisplacements_(const ContainerAllocator& _alloc)
    : d_left(0.0)
    , d_right(0.0)  {
  (void)_alloc;
    }



   typedef double _d_left_type;
  _d_left_type d_left;

   typedef double _d_right_type;
  _d_right_type d_right;





  typedef boost::shared_ptr< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> const> ConstPtr;

}; // struct ME439WheelDisplacements_

typedef ::mobrob_util::ME439WheelDisplacements_<std::allocator<void> > ME439WheelDisplacements;

typedef boost::shared_ptr< ::mobrob_util::ME439WheelDisplacements > ME439WheelDisplacementsPtr;
typedef boost::shared_ptr< ::mobrob_util::ME439WheelDisplacements const> ME439WheelDisplacementsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator1> & lhs, const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator2> & rhs)
{
  return lhs.d_left == rhs.d_left &&
    lhs.d_right == rhs.d_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator1> & lhs, const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobrob_util

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c76547e5c694fd23ef9ed1874ecca4a";
  }

  static const char* value(const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c76547e5c694fd2ULL;
  static const uint64_t static_value2 = 0x3ef9ed1874ecca4aULL;
};

template<class ContainerAllocator>
struct DataType< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobrob_util/ME439WheelDisplacements";
  }

  static const char* value(const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 d_left\n"
"float64 d_right\n"
;
  }

  static const char* value(const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.d_left);
      stream.next(m.d_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ME439WheelDisplacements_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobrob_util::ME439WheelDisplacements_<ContainerAllocator>& v)
  {
    s << indent << "d_left: ";
    Printer<double>::stream(s, indent + "  ", v.d_left);
    s << indent << "d_right: ";
    Printer<double>::stream(s, indent + "  ", v.d_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBROB_UTIL_MESSAGE_ME439WHEELDISPLACEMENTS_H
