// Generated by gencpp from file mobrob_util/ME439PathSpecs.msg
// DO NOT EDIT!


#ifndef MOBROB_UTIL_MESSAGE_ME439PATHSPECS_H
#define MOBROB_UTIL_MESSAGE_ME439PATHSPECS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobrob_util
{
template <class ContainerAllocator>
struct ME439PathSpecs_
{
  typedef ME439PathSpecs_<ContainerAllocator> Type;

  ME439PathSpecs_()
    : x0(0.0)
    , y0(0.0)
    , theta0(0.0)
    , Radius(0.0)
    , Length(0.0)  {
    }
  ME439PathSpecs_(const ContainerAllocator& _alloc)
    : x0(0.0)
    , y0(0.0)
    , theta0(0.0)
    , Radius(0.0)
    , Length(0.0)  {
  (void)_alloc;
    }



   typedef float _x0_type;
  _x0_type x0;

   typedef float _y0_type;
  _y0_type y0;

   typedef float _theta0_type;
  _theta0_type theta0;

   typedef float _Radius_type;
  _Radius_type Radius;

   typedef float _Length_type;
  _Length_type Length;





  typedef boost::shared_ptr< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> const> ConstPtr;

}; // struct ME439PathSpecs_

typedef ::mobrob_util::ME439PathSpecs_<std::allocator<void> > ME439PathSpecs;

typedef boost::shared_ptr< ::mobrob_util::ME439PathSpecs > ME439PathSpecsPtr;
typedef boost::shared_ptr< ::mobrob_util::ME439PathSpecs const> ME439PathSpecsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobrob_util::ME439PathSpecs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobrob_util::ME439PathSpecs_<ContainerAllocator1> & lhs, const ::mobrob_util::ME439PathSpecs_<ContainerAllocator2> & rhs)
{
  return lhs.x0 == rhs.x0 &&
    lhs.y0 == rhs.y0 &&
    lhs.theta0 == rhs.theta0 &&
    lhs.Radius == rhs.Radius &&
    lhs.Length == rhs.Length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobrob_util::ME439PathSpecs_<ContainerAllocator1> & lhs, const ::mobrob_util::ME439PathSpecs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobrob_util

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "278b13eb1b2cd154f8602d6118f2c62d";
  }

  static const char* value(const ::mobrob_util::ME439PathSpecs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x278b13eb1b2cd154ULL;
  static const uint64_t static_value2 = 0xf8602d6118f2c62dULL;
};

template<class ContainerAllocator>
struct DataType< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobrob_util/ME439PathSpecs";
  }

  static const char* value(const ::mobrob_util::ME439PathSpecs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x0\n"
"float32 y0\n"
"float32 theta0\n"
"float32 Radius\n"
"float32 Length\n"
;
  }

  static const char* value(const ::mobrob_util::ME439PathSpecs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x0);
      stream.next(m.y0);
      stream.next(m.theta0);
      stream.next(m.Radius);
      stream.next(m.Length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ME439PathSpecs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobrob_util::ME439PathSpecs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobrob_util::ME439PathSpecs_<ContainerAllocator>& v)
  {
    s << indent << "x0: ";
    Printer<float>::stream(s, indent + "  ", v.x0);
    s << indent << "y0: ";
    Printer<float>::stream(s, indent + "  ", v.y0);
    s << indent << "theta0: ";
    Printer<float>::stream(s, indent + "  ", v.theta0);
    s << indent << "Radius: ";
    Printer<float>::stream(s, indent + "  ", v.Radius);
    s << indent << "Length: ";
    Printer<float>::stream(s, indent + "  ", v.Length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBROB_UTIL_MESSAGE_ME439PATHSPECS_H
