// Generated by gencpp from file mobrob_util/EncodersRaw.msg
// DO NOT EDIT!


#ifndef MOBROB_UTIL_MESSAGE_ENCODERSRAW_H
#define MOBROB_UTIL_MESSAGE_ENCODERSRAW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobrob_util
{
template <class ContainerAllocator>
struct EncodersRaw_
{
  typedef EncodersRaw_<ContainerAllocator> Type;

  EncodersRaw_()
    : e0(0)
    , e1(0)
    , t()  {
    }
  EncodersRaw_(const ContainerAllocator& _alloc)
    : e0(0)
    , e1(0)
    , t()  {
  (void)_alloc;
    }



   typedef int64_t _e0_type;
  _e0_type e0;

   typedef int64_t _e1_type;
  _e1_type e1;

   typedef ros::Time _t_type;
  _t_type t;





  typedef boost::shared_ptr< ::mobrob_util::EncodersRaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobrob_util::EncodersRaw_<ContainerAllocator> const> ConstPtr;

}; // struct EncodersRaw_

typedef ::mobrob_util::EncodersRaw_<std::allocator<void> > EncodersRaw;

typedef boost::shared_ptr< ::mobrob_util::EncodersRaw > EncodersRawPtr;
typedef boost::shared_ptr< ::mobrob_util::EncodersRaw const> EncodersRawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobrob_util::EncodersRaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobrob_util::EncodersRaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobrob_util::EncodersRaw_<ContainerAllocator1> & lhs, const ::mobrob_util::EncodersRaw_<ContainerAllocator2> & rhs)
{
  return lhs.e0 == rhs.e0 &&
    lhs.e1 == rhs.e1 &&
    lhs.t == rhs.t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobrob_util::EncodersRaw_<ContainerAllocator1> & lhs, const ::mobrob_util::EncodersRaw_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobrob_util

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobrob_util::EncodersRaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobrob_util::EncodersRaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobrob_util::EncodersRaw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "593ef6f85d37b23b49a86251ea1a5b8e";
  }

  static const char* value(const ::mobrob_util::EncodersRaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x593ef6f85d37b23bULL;
  static const uint64_t static_value2 = 0x49a86251ea1a5b8eULL;
};

template<class ContainerAllocator>
struct DataType< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobrob_util/EncodersRaw";
  }

  static const char* value(const ::mobrob_util::EncodersRaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 e0\n"
"int64 e1\n"
"time t\n"
;
  }

  static const char* value(const ::mobrob_util::EncodersRaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.e0);
      stream.next(m.e1);
      stream.next(m.t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncodersRaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobrob_util::EncodersRaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobrob_util::EncodersRaw_<ContainerAllocator>& v)
  {
    s << indent << "e0: ";
    Printer<int64_t>::stream(s, indent + "  ", v.e0);
    s << indent << "e1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.e1);
    s << indent << "t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBROB_UTIL_MESSAGE_ENCODERSRAW_H
