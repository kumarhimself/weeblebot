// Generated by gencpp from file motors/motors_speed_msg.msg
// DO NOT EDIT!


#ifndef MOTORS_MESSAGE_MOTORS_SPEED_MSG_H
#define MOTORS_MESSAGE_MOTORS_SPEED_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motors
{
template <class ContainerAllocator>
struct motors_speed_msg_
{
  typedef motors_speed_msg_<ContainerAllocator> Type;

  motors_speed_msg_()
    : left_motor_speed(0.0)
    , right_motor_speed(0.0)  {
    }
  motors_speed_msg_(const ContainerAllocator& _alloc)
    : left_motor_speed(0.0)
    , right_motor_speed(0.0)  {
  (void)_alloc;
    }



   typedef float _left_motor_speed_type;
  _left_motor_speed_type left_motor_speed;

   typedef float _right_motor_speed_type;
  _right_motor_speed_type right_motor_speed;





  typedef boost::shared_ptr< ::motors::motors_speed_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motors::motors_speed_msg_<ContainerAllocator> const> ConstPtr;

}; // struct motors_speed_msg_

typedef ::motors::motors_speed_msg_<std::allocator<void> > motors_speed_msg;

typedef boost::shared_ptr< ::motors::motors_speed_msg > motors_speed_msgPtr;
typedef boost::shared_ptr< ::motors::motors_speed_msg const> motors_speed_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motors::motors_speed_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motors::motors_speed_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motors::motors_speed_msg_<ContainerAllocator1> & lhs, const ::motors::motors_speed_msg_<ContainerAllocator2> & rhs)
{
  return lhs.left_motor_speed == rhs.left_motor_speed &&
    lhs.right_motor_speed == rhs.right_motor_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motors::motors_speed_msg_<ContainerAllocator1> & lhs, const ::motors::motors_speed_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motors::motors_speed_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motors::motors_speed_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motors::motors_speed_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motors::motors_speed_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motors::motors_speed_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motors::motors_speed_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motors::motors_speed_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64774e203c8f0b9062c05b152b874c89";
  }

  static const char* value(const ::motors::motors_speed_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64774e203c8f0b90ULL;
  static const uint64_t static_value2 = 0x62c05b152b874c89ULL;
};

template<class ContainerAllocator>
struct DataType< ::motors::motors_speed_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motors/motors_speed_msg";
  }

  static const char* value(const ::motors::motors_speed_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motors::motors_speed_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_motor_speed\n"
"float32 right_motor_speed\n"
;
  }

  static const char* value(const ::motors::motors_speed_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motors::motors_speed_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_motor_speed);
      stream.next(m.right_motor_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motors_speed_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motors::motors_speed_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motors::motors_speed_msg_<ContainerAllocator>& v)
  {
    s << indent << "left_motor_speed: ";
    Printer<float>::stream(s, indent + "  ", v.left_motor_speed);
    s << indent << "right_motor_speed: ";
    Printer<float>::stream(s, indent + "  ", v.right_motor_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTORS_MESSAGE_MOTORS_SPEED_MSG_H
