# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobrob_util/ME439SensorsRaw.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ME439SensorsRaw(genpy.Message):
  _md5sum = "e832476c98d8752e8bb419b8adb5fe2a"
  _type = "mobrob_util/ME439SensorsRaw"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 e0
int64 e1
int16 a0
int16 a1
int16 a2
int16 a3
int16 a4
int16 a5
int32 u0
int32 u1
int32 u2
time t"""
  __slots__ = ['e0','e1','a0','a1','a2','a3','a4','a5','u0','u1','u2','t']
  _slot_types = ['int64','int64','int16','int16','int16','int16','int16','int16','int32','int32','int32','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       e0,e1,a0,a1,a2,a3,a4,a5,u0,u1,u2,t

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ME439SensorsRaw, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.e0 is None:
        self.e0 = 0
      if self.e1 is None:
        self.e1 = 0
      if self.a0 is None:
        self.a0 = 0
      if self.a1 is None:
        self.a1 = 0
      if self.a2 is None:
        self.a2 = 0
      if self.a3 is None:
        self.a3 = 0
      if self.a4 is None:
        self.a4 = 0
      if self.a5 is None:
        self.a5 = 0
      if self.u0 is None:
        self.u0 = 0
      if self.u1 is None:
        self.u1 = 0
      if self.u2 is None:
        self.u2 = 0
      if self.t is None:
        self.t = genpy.Time()
    else:
      self.e0 = 0
      self.e1 = 0
      self.a0 = 0
      self.a1 = 0
      self.a2 = 0
      self.a3 = 0
      self.a4 = 0
      self.a5 = 0
      self.u0 = 0
      self.u1 = 0
      self.u2 = 0
      self.t = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q6h3i2I().pack(_x.e0, _x.e1, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0, _x.u1, _x.u2, _x.t.secs, _x.t.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.t is None:
        self.t = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.e0, _x.e1, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0, _x.u1, _x.u2, _x.t.secs, _x.t.nsecs,) = _get_struct_2q6h3i2I().unpack(str[start:end])
      self.t.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q6h3i2I().pack(_x.e0, _x.e1, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0, _x.u1, _x.u2, _x.t.secs, _x.t.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.t is None:
        self.t = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.e0, _x.e1, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0, _x.u1, _x.u2, _x.t.secs, _x.t.nsecs,) = _get_struct_2q6h3i2I().unpack(str[start:end])
      self.t.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q6h3i2I = None
def _get_struct_2q6h3i2I():
    global _struct_2q6h3i2I
    if _struct_2q6h3i2I is None:
        _struct_2q6h3i2I = struct.Struct("<2q6h3i2I")
    return _struct_2q6h3i2I
