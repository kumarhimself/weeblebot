# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobrob_util/ME439SensorsProcessed.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ME439SensorsProcessed(genpy.Message):
  _md5sum = "44afd1f89023a5ad6799a84d47e3ad41"
  _type = "mobrob_util/ME439SensorsProcessed"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 e0radians
float32 e1radians
float32 e0meters
float32 e1meters
float32 e0radpersec
float32 e1radpersec
float32 e0meterspersec
float32 e1meterspersec
float32 a0
float32 a1
float32 a2
float32 a3
float32 a4
float32 a5
float32 u0meters
float32 u1meters
float32 u2meters
duration dt"""
  __slots__ = ['e0radians','e1radians','e0meters','e1meters','e0radpersec','e1radpersec','e0meterspersec','e1meterspersec','a0','a1','a2','a3','a4','a5','u0meters','u1meters','u2meters','dt']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       e0radians,e1radians,e0meters,e1meters,e0radpersec,e1radpersec,e0meterspersec,e1meterspersec,a0,a1,a2,a3,a4,a5,u0meters,u1meters,u2meters,dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ME439SensorsProcessed, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.e0radians is None:
        self.e0radians = 0.
      if self.e1radians is None:
        self.e1radians = 0.
      if self.e0meters is None:
        self.e0meters = 0.
      if self.e1meters is None:
        self.e1meters = 0.
      if self.e0radpersec is None:
        self.e0radpersec = 0.
      if self.e1radpersec is None:
        self.e1radpersec = 0.
      if self.e0meterspersec is None:
        self.e0meterspersec = 0.
      if self.e1meterspersec is None:
        self.e1meterspersec = 0.
      if self.a0 is None:
        self.a0 = 0.
      if self.a1 is None:
        self.a1 = 0.
      if self.a2 is None:
        self.a2 = 0.
      if self.a3 is None:
        self.a3 = 0.
      if self.a4 is None:
        self.a4 = 0.
      if self.a5 is None:
        self.a5 = 0.
      if self.u0meters is None:
        self.u0meters = 0.
      if self.u1meters is None:
        self.u1meters = 0.
      if self.u2meters is None:
        self.u2meters = 0.
      if self.dt is None:
        self.dt = genpy.Duration()
    else:
      self.e0radians = 0.
      self.e1radians = 0.
      self.e0meters = 0.
      self.e1meters = 0.
      self.e0radpersec = 0.
      self.e1radpersec = 0.
      self.e0meterspersec = 0.
      self.e1meterspersec = 0.
      self.a0 = 0.
      self.a1 = 0.
      self.a2 = 0.
      self.a3 = 0.
      self.a4 = 0.
      self.a5 = 0.
      self.u0meters = 0.
      self.u1meters = 0.
      self.u2meters = 0.
      self.dt = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17f2i().pack(_x.e0radians, _x.e1radians, _x.e0meters, _x.e1meters, _x.e0radpersec, _x.e1radpersec, _x.e0meterspersec, _x.e1meterspersec, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0meters, _x.u1meters, _x.u2meters, _x.dt.secs, _x.dt.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dt is None:
        self.dt = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.e0radians, _x.e1radians, _x.e0meters, _x.e1meters, _x.e0radpersec, _x.e1radpersec, _x.e0meterspersec, _x.e1meterspersec, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0meters, _x.u1meters, _x.u2meters, _x.dt.secs, _x.dt.nsecs,) = _get_struct_17f2i().unpack(str[start:end])
      self.dt.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17f2i().pack(_x.e0radians, _x.e1radians, _x.e0meters, _x.e1meters, _x.e0radpersec, _x.e1radpersec, _x.e0meterspersec, _x.e1meterspersec, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0meters, _x.u1meters, _x.u2meters, _x.dt.secs, _x.dt.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.dt is None:
        self.dt = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 76
      (_x.e0radians, _x.e1radians, _x.e0meters, _x.e1meters, _x.e0radpersec, _x.e1radpersec, _x.e0meterspersec, _x.e1meterspersec, _x.a0, _x.a1, _x.a2, _x.a3, _x.a4, _x.a5, _x.u0meters, _x.u1meters, _x.u2meters, _x.dt.secs, _x.dt.nsecs,) = _get_struct_17f2i().unpack(str[start:end])
      self.dt.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17f2i = None
def _get_struct_17f2i():
    global _struct_17f2i
    if _struct_17f2i is None:
        _struct_17f2i = struct.Struct("<17f2i")
    return _struct_17f2i
